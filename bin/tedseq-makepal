#!/bin/bash
# Parse TED-seq bam files based on soft clipping status.

if [ $# -lt 2 ]; then
	echo -e "Usage:\t tedseq-makepal [options] -a <bam> -b <bed>"
	echo -e "Options:"
	echo -e "\t-bin\tbin size (default=1)"
	echo -e "\t-win\twindow size (default=500)"
	exit
fi

SCRIPTDIR="~/Work/shared/script/"
SPLIT=false
BIN=10

while [[ $# -ge 1 ]]; do
	key="$1"
	case $key in
		-a)
		BAM="$2"
		shift
		;;
		-b)
		BED="$2"
		shift
		;;
		-bin)
		BIN="$2"
		shift
		;;
		-win)
		WIN="$2"
		shift
		;;
		--default)
		;;
		*)
		;;
	esac
	shift
done

samtools view -H $BAM > _sam.header.tmp
samtools view $BAM | awk '!and($2,16) {
		if($6~/^[0-9]+S/) {split($6,a,"S"); print $0 > "_sam."a[1]"S.tmp";}
		else {print $0 > "_sam.0S.tmp";}
		next;
	}
	{
		if($6~/[0-9]+S$/) {n=split($6,a,"M"); print $0 > "_sam."a[n]".tmp";}
		else {print $0 > "_sam.0S.tmp";}
	}'
for f in _sam.*S.tmp; do
	outsuf=${f#_sam.*}
	cat _sam.header.tmp $f > _sam2.$outsuf
	samtools view -Sb _sam2.$outsuf > _bam.$outsuf
done

# Generate bedgraph files
for f in _bam.*S.tmp; do
	outsuf=${f#_bam.*}
	bedtools genomecov -ibam _bam.$outsuf -bg -5 -strand + > _bg.pl.$outsuf
	bedtools genomecov -ibam _bam.$outsuf -bg -5 -strand - > _bg.mn.$outsuf
done

# Generate last 500 bp bed file with 1 base extension of the blocks
~/Work/shared/script/bed12toend3.sh $BED 500 | sort -k1,1 -k2,2n | \
awk '{split($11,exonSizes,",");split($12,exonStarts,",");exonCount=$10;A="";B="";
	if($6=="+") {
		for(i=exonCount;i>1;--i) {
			--exonStarts[i];++exonSizes[i];--exonSizes[i-1];}
		for(i=1;i<=exonCount;++i) {
			A=A exonSizes[i]",";B=B exonStarts[i]",";}
		OFS="\t";print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,A,B > "_bed.500.pl.tmp";
	} else {
		for(i=1;i<exonCount;++i) {
			++exonSizes[i];--exonSizes[i+1];++exonStarts[i+1];}
		for(i=1;i<=exonCount;++i) {
			A=A exonSizes[i]",";B=B exonStarts[i]",";}
		OFS="\t";print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,A,B > "_bed.500.mn.tmp";
	}
}'

# Generate matrices
for f in _bg.pl.*S.tmp; do
	outsuf=${f#_bg.pl.*}
	if [ -s _bg.pl.$outsuf ] && [ -s _bed.500.pl.tmp ]; then
		~/Work/shared/script/bgmatrix.sh -a _bed.500.pl.tmp -b _bg.pl.$outsuf -split -bin 1 > _mat.pl.$outsuf 
	fi
	if [ -s _bg.mn.$outsuf ] && [ -s _bed.500.mn.tmp ]; then
		~/Work/shared/script/bgmatrix.sh -a _bed.500.mn.tmp -b _bg.mn.$outsuf -split -bin 1 > _mat.mn.$outsuf 
	fi
done

cp _mat.pl.0S.tmp _mat.pl.tmp
cp _mat.mn.0S.tmp _mat.mn.tmp
mv _mat.pl.0S.tmp _mat0.pl.tmp
mv _mat.mn.0S.tmp _mat0.mn.tmp

# Collapse matrices
for f in _mat.pl.*S.tmp; do
	outsuf=${f#_mat.pl.*}
	if [ -s _mat.pl.$outsuf ]; then
		paste _mat.pl.tmp _mat.pl.$outsuf > _mat.pl.pasted.tmp
		awk -v os=$outsuf 'BEGIN{split(os,suf,"S"); shiftBase=0+suf[1];}
			{	printf $1+$(1+NF/2+shiftBase);
				for(i=2;i<=NF/2-shiftBase;++i) printf "\t"$i+$(i+NF/2+shiftBase);
				for(i=NF/2-shiftBase+1;i<=NF/2;++i) printf "\t"$i; printf "\n";}' \
			_mat.pl.pasted.tmp> _mat.pl.tmp
	fi
	if [ -s _mat.mn.$outsuf ]; then
		paste _mat.mn.tmp _mat.mn.$outsuf > _mat.mn.pasted.tmp
		awk -v os=$outsuf 'BEGIN{split(os,suf,"S"); shiftBase=0+suf[1];}
			{	printf $1;
				for(i=2;i<=shiftBase;++i) printf "\t"$i;
				for(i=shiftBase+1;i<=NF/2;++i) printf "\t"$i+$(i+NF/2-shiftBase);
				printf "\n";}' \
			_mat.mn.pasted.tmp> _mat.mn.tmp
	fi
done

# Finalize output
cut -f4 _bed.500.pl.tmp | paste - _mat.pl.tmp > _mat.pl.id.tmp
cut -f4 _bed.500.mn.tmp | paste - <(awk '{printf $NF; for(i=NF-1;i>=1;--i) printf "\t"$i; printf "\n";}' _mat.mn.tmp ) > _mat.mn.id.tmp
awk 'NR==1{fc=NF}FNR==1{++fid}fid==1{mat[$1]=$0;next}fid==2{mat[$1]=$0;next}
	mat[$4]{print mat[$4];next}{printf $4;for(i=1;i<fc;++i) printf "\t0";printf "\n"}' _mat.pl.id.tmp _mat.mn.id.tmp $BED
rm _*.tmp
